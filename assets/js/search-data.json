{
  
    
        "post0": {
            "title": "Pandemic modelling - SIR model",
            "content": "About . In this notebook I implement a basic SIR model. . SIR model . From Wikipedia: SIR. . The SIR model without vital dynamics:The dynamics of an epidemic, for example the flu, &gt; are often much faster than the dynamics of birth and death, therefore, birth and death are often omitted in simple compartmental models. The SIR system without so-called vital dynamics (birth and death, sometimes called demography) described above can be expressed by the following set of ordinary differential equations:$$ begin{aligned} &amp;{ frac {dS}{dt}}=-{ frac { beta IS}{N}}, &amp;{ frac {dI}{dt}}={ frac { beta IS}{N}}- gamma I, &amp;{ frac {dR}{dt}}= gamma I, end{aligned} $$ . At time $t$ the SIR model is characterised by $S(t)$ for the number of susceptible in the population, $I(t)$ for the number of infected, and $R(t)$ for the number of recovered or deceased (or immune) individuals out of the population $N = S(t)+I(t)+R(t)$. . People move through these stages as follows: . . import attr import pandas as pd import numpy as np from scipy.integrate import solve_ivp import plotly.express as px @attr.s class SIR(object): N = attr.ib(converter=int) I = attr.ib(converter=float) beta = attr.ib(converter=float) gamma = attr.ib(converter=float) days = attr.ib(converter=int, default=200) S = attr.ib(init=False, converter=float) R = attr.ib(init=False, converter=float, default=0.0) def __attrs_post_init__(self): self.S = self.N - self.I - self.R self.beta = round(self.beta, 2) self.gamma = round(self.gamma, 2) @staticmethod def ode(t, y, beta, gamma, N): S, I, R = y new_cases = beta*S*I/N removed_cases = gamma*I S = -new_cases I = new_cases - removed_cases R = removed_cases y = (S,I,R) return y def solve(self): y = (self.S, self.I, self.R) days = self.days + 1 sol = solve_ivp(SIR.ode, [0, days], y,t_eval=np.arange(0, days), args=(self.beta, self.gamma, self.N)) df = pd.DataFrame(sol.y.T, index=pd.Index(sol.t,name=&quot;Time&quot;), columns=[&quot;Susceptible&quot;,&quot;Infected&quot;,&quot;Removed&quot;]).reset_index() df[&quot;beta&quot;] = self.beta df[&quot;gamma&quot;] = self.gamma df = df.melt(id_vars=[&quot;Time&quot;, &quot;beta&quot;, &quot;gamma&quot;], value_vars=[&quot;Susceptible&quot;, &quot;Infected&quot;, &quot;Removed&quot;], value_name=&quot;People&quot;, var_name=&quot;Category&quot;) return (df, sol) def plot(self): df, sol = self.solve() fig = px.line(df, x=df.Time, y=df.People, color=df.Category, title=dict( text=self.__repr__(), y=0.98, x=0.5, xanchor=&quot;center&quot;, yanchor=&quot;top&quot;) ) fig.for_each_trace(lambda t: t.update(hovertemplate = &quot;%{y:.0f}&quot;)) fig.update_layout(hovermode=&quot;x unified&quot;, margin=dict(l=20, r=20, t=30, b=20), legend=dict(orientation=&quot;h&quot;, title=&quot;&quot;)) return fig . m = SIR(5000,6,0.3,0.1) fig = m.plot() fig.write_image(&quot;images/pandemic/sir.svg&quot;) HTML(fig.to_html()) . . . Grid of $ beta$ and $ gamma$ . from itertools import product N = 5000 I = 6 cols = np.arange(0.2,0.8, 0.1) rows = np.arange(0.1, 0.7, 0.1) res = [] for b, g in product(cols, rows): s = SIR(N, I, b, g) df,_ = s.solve() res.append(df) dfs = pd.concat(res) def text_to_symbol(t): if &quot;beta&quot; in t or &quot;gamma&quot; in t: s,v = t.split(&quot;=&quot;) return &quot;$ {s}={v}$&quot;.format(s=s,v=v) fig = px.line(dfs, x=&quot;Time&quot;, y=&quot;People&quot;, color=&quot;Category&quot;, facet_row=&quot;beta&quot;, facet_col=&quot;gamma&quot;, height=900, width=900) fig.for_each_annotation(lambda a: a.update(text=text_to_symbol(a.text))) fig.for_each_trace(lambda t: t.update(hovertemplate = &quot;%{y:.0f}&quot;)) fig.for_each_xaxis(lambda x: x.update(title=&quot;&quot;)) fig.for_each_yaxis(lambda x: x.update(title=&quot;&quot;)) fig.update_layout(title=dict(text=r&quot;$ text{SIR for various } beta text{ and } gamma$&quot;, y=0.98, x=0.5, xanchor=&quot;center&quot;, yanchor=&quot;top&quot;), hovermode=&quot;x unified&quot;, legend=dict(orientation=&quot;h&quot;, title=&quot;&quot;), margin=dict(l=20, r=20, t=40, b=10), annotations = list(fig.layout.annotations) + [dict(x=-0.07, y=0.5, showarrow=False, text=&quot;People&quot;, textangle=-90, xref=&quot;paper&quot;, yref=&quot;paper&quot; ), dict(x=0.5, y=-0.07, showarrow=False, text=&quot;Time&quot;, xref=&quot;paper&quot;, yref=&quot;paper&quot; ) ] ) fig.write_image(&quot;images/pandemic/sir_grid.svg&quot;) HTML(fig.to_html()) . . .",
            "url": "https://binnisb.github.io/blog/datascience/2020/04/03/Pandemic.html",
            "relUrl": "/datascience/2020/04/03/Pandemic.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Getting Plotly (and Cufflinks) working in Jupyter Lab",
            "content": "Plotly &amp; Cufflinks . Nice visualisation library for Python, Pandas and other languages / environments. I was trying to get it working in Jupyter Lab notebooks but plots wouldn&#39;t show. Here is what I had to do to get it working . Requirements . I&#39;m running POP! os which is based on Ubuntu. . To be able to export png, svg or other formats one needs to install few dependencies: . $ apt install python3-dev $ yarn global add electron orca . For my projects I usually create a virtual env and create a requirements.txt file with dependencies for what I need. . In my requirements.txt the following: . jupyterlab ipywidgets pandas plotly cufflinks psutil requests . And finally I had to do: . # Avoid &quot;JavaScript heap out of memory&quot; errors during extension installation # (OS X/Linux) export NODE_OPTIONS=--max-old-space-size=4096 # Jupyter widgets extension jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build # FigureWidget support jupyter labextension install plotlywidget --no-build # and jupyterlab renderer support jupyter labextension install jupyterlab-plotly --no-build # Build extensions (must be done to activate extensions since --no-build is used above) jupyter lab build # Unset NODE_OPTIONS environment variable # (OS X/Linux) unset NODE_OPTIONS . import attr import pandas as pd import numpy as np df = pd.DataFrame({&quot;time&quot;:np.arange(0,100), &quot;A&quot;:np.arange(100,200), &quot;B&quot;:np.arange(50,150)}) . df.head() . time A B . 0 0 | 100 | 50 | . 1 1 | 101 | 51 | . 2 2 | 102 | 52 | . 3 3 | 103 | 53 | . 4 4 | 104 | 54 | . import cufflinks as cf . fig = df.figure() from IPython.display import HTML, Markdown HTML(fig.to_html()) . . .",
            "url": "https://binnisb.github.io/blog/datascience/2020/04/02/Plotly-in-lab.html",
            "relUrl": "/datascience/2020/04/02/Plotly-in-lab.html",
            "date": " • Apr 2, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://binnisb.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Education . B.Sc Computer Science | M.Sc. Computational and Systems Biology. | . Work . Current: . Quantitative analyst at Kommuninvest i Sverige. | . Previous: . Data engineer at Spotify | Research assistant in functional bioinformatics, and metagenomics | . Publications . Alneberg J, Bjarnason BS, De Bruijn I, Schirmer M, Quick J, Ijaz UZ, Lahti L, Loman NJ, Andersson AF, Quince C. Binning metagenomic contigs by coverage and composition. Nature methods. 2014 Nov;11(11):1144-6. . Powered by . fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://binnisb.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

}